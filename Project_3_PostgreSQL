CREATE TABLE brands(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE classifications(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(30) NOT NULL UNIQUE
);

CREATE TABLE customers(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    address VARCHAR(150) NOT NULL,
    phone VARCHAR(30) NOT NULL UNIQUE,
    loyalty_card BOOL NOT NULL DEFAULT FALSE
);

CREATE TABLE items(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    quantity INT NOT NULL,
    price DEC(12, 2) NOT NULL,
    description VARCHAR,
    brand_id INT NOT NULL,
    classification_id INT NOT NULL,

    CONSTRAINT ct_quantity
    CHECK (quantity >= 0),

    CONSTRAINT ct_price
    CHECK (price > 0),

    FOREIGN KEY (brand_id)
    REFERENCES brands(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,

    FOREIGN KEY (classification_id)
    REFERENCES classifications(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE orders(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    customer_id INT NOT NULL,

    FOREIGN KEY (customer_id)
    REFERENCES customers(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE reviews(
    customer_id INT NOT NULL,
    item_id INT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    rating DEC(3, 1) NOT NULL DEFAULT 0.0,

    FOREIGN KEY (customer_id)
    REFERENCES customers(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,

    FOREIGN KEY (item_id)
    REFERENCES items(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,

    CONSTRAINT ct_rating
    CHECK (rating <= 10.0),

    PRIMARY KEY (customer_id, item_id)
);

CREATE TABLE orders_items(
    order_id INT NOT NULL,
    item_id INT NOT NULL,
    quantity INT NOT NULL,

    FOREIGN KEY (order_id)
    REFERENCES orders(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,

    FOREIGN KEY (item_id)
    REFERENCES items(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,

    CONSTRAINT ck_quantity
    CHECK (quantity >= 0),

    PRIMARY KEY (order_id, item_id)
);


---------------------------2----------------------------------------





INSERT INTO items(name, quantity, price, description, brand_id, classification_id)
SELECT
    CONCAT('Item', r.created_at) AS name,
    r.customer_id AS quatity,
    (r.rating * 5) AS price,
    NULL AS description,
    r.item_id AS brand_id,
    (SELECT MIN(item_id) FROM reviews) AS classification_id
FROM
    reviews AS r
ORDER BY
    item_id
LIMIT 10
;




----------------------------3-------------------------------------------



UPDATE reviews
SET rating =
    CASE
        WHEN item_id = customer_id THEN 10.0
        WHEN customer_id > item_id THEN 5.5
        ELSE rating
    END;




------------------------------------4------------------------------------



DELETE FROM customers
WHERE id IN
    (SELECT c.id
    FROM customers AS c
    LEFT JOIN orders AS o
    ON c.id = o.customer_id
    WHERE o.customer_id IS NULL);



------------------------------------5------------------------------------



SELECT
    id,
    last_name,
    loyalty_card
FROM
    customers
WHERE
    loyalty_card = TRUE
    AND
    (last_name LIKE '%M%'
    OR
    last_name LIKE '%m%')
ORDER BY
    last_name DESC,
    id;


------------------------------------6------------------------------------



SELECT
    id,
    TO_CHAR(created_at, 'DD-MM-YYYY') AS created_at,
    customer_id
FROM
    orders
WHERE
    created_at > '01-01-2025'
GROUP BY
    id
HAVING
    customer_id BETWEEN 15 AND 30
ORDER BY
    created_at,
    customer_id DESC,
    id
LIMIT 5;




------------------------------------7------------------------------------


SELECT
    i.name,
    CONCAT(UPPER(b.name), '/', LOWER(c.name)) AS promotion,
    CONCAT('On sale: ', COALESCE(i.description, '')) AS description,
    i.quantity
FROM
    items AS i
LEFT JOIN
    brands AS b
ON i.brand_id = b.id
LEFT JOIN
    classifications AS c
ON i.classification_id = c.id
LEFT JOIN
        orders_items AS oi
ON i.id = oi.item_id
WHERE
    oi.item_id IS NULL
ORDER BY
    quantity DESC,
    name;



------------------------------------8------------------------------------


SELECT
    c.id AS customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
    COUNT(o.customer_id) AS total_orders,
    CASE
        WHEN c.loyalty_card = TRUE THEN 'Loyal Customer'
        ELSE 'Regular Customer'
    END AS loyalty_status
FROM
    customers AS c
LEFT JOIN
    orders AS o
ON c.id = o.customer_id
LEFT JOIN
    reviews AS r
ON c.id = r.customer_id
WHERE
    r.customer_id IS NULL
GROUP BY c.id, c.first_name, c.last_name
HAVING
    COUNT(o.customer_id) > 0
ORDER BY
    total_orders DESC,
    c.id;


------------------------------------9------------------------------------

SELECT
    i.name,
    ROUND(AVG(r.rating), 2) AS average_rating,
    COUNT(r.item_id) AS total_reviews,
    b.name AS brand_name,
    cl.name AS classification_name
FROM
    reviews AS r
JOIN
    items AS i
ON r.item_id = i.id
JOIN
    brands AS b
ON i.brand_id = b.id
JOIN
    classifications as cl
ON i.classification_id = cl.id
GROUP BY i.name, b.name, cl.name
HAVING
    COUNT(r.item_id) >= 3
ORDER BY
    average_rating DESC,
    i.name
LIMIT 3;



------------------------------------10------------------------------------




CREATE OR REPLACE FUNCTION udf_classification_items_count(
    classification_name VARCHAR(30)
) RETURNS TEXT
AS
$$
DECLARE
    class_count INT;
BEGIN
    SELECT
        COUNT(*)
    INTO class_count
    FROM
        classifications AS cl
    JOIN
        items AS i
    ON cl.id = i.classification_id
    WHERE
        cl.name = classification_name;

    IF class_count > 0 THEN
        RETURN 'Found ' || class_count || ' items.';
    ELSE
        RETURN 'No items found.';
    END if;
END;
$$
LANGUAGE plpgsql;




------------------------------------11------------------------------------


CREATE OR REPLACE PROCEDURE udp_update_loyalty_status(
    min_orders INT
) AS
$$
BEGIN
    UPDATE customers
    SET loyalty_card = TRUE
    WHERE id IN
        (
            SELECT
                o.customer_id
            FROM
                orders AS o
            GROUP BY
                o.customer_id
            HAVING
                COUNT(O.customer_id) >= min_orders
            );

END;
$$
LANGUAGE plpgsql;






